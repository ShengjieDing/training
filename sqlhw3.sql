--1.	In SQL Server, assuming you can find the result by using both joins and subqueries, which one would you prefer to use and why?
	--JOIN in most situation will have better performance
	--Subquery is more readable and easier to understand
	--I would use subquery if the query is complex and performance not terrible
--2.	What is CTE and when to use it?
	--CTE is common table expression, used as a temporary result set. 
	--It has the advantage of being able to be used recursively
--3.	What are Table Variables? What is their scope and where are they created in SQL Server?
	--Table variable is a variable of type table, stores data temporarily
	--it has local scope and can only be used in specific batch or session
--4.	What is the difference between DELETE and TRUNCATE? Which one will have better performance and why?
	--DELETE removes specific rows based on a condition using a where clause
	--TRUNCATE removes all rows from table
	--TRUNCATE has better performance
--5.	What is Identity column? How does DELETE and TRUNCATE affect it?
	--Generated by the database with certain specifications
	--can commonly used as primary key but not always 
	--TRUNCATE resets identity vlaues DELETE does not 
--6.	What is difference between “delete from table_name” and “truncate table table_name”?
	--Functionally identical 
	--TRUNCATE is faster 

--1.
SELECT DISTINCT e.city
FROM Employees e
JOIN
Customers c
ON e.city = c.city

--2.
--a.
SELECT DISTINCT c.City
FROM Customers c
WHERE c.City NOT IN(
SELECT e.City from Employees e)

--b.
SELECT DISTINCT c.City  
FROM Customers c
EXCEPT
SELECT DISTINCT e.City
FROM Employees e

--3.
SELECT p.ProductName, SUM(od.Quantity) as totOrder
FROM Products p
JOIN
[Order Details] od 
ON p.ProductID = od.ProductID
GROUP BY p.ProductName

--4.
SELECT c.city, SUM(od.Quantity) as totOrder
FROM Customers c
JOIN 
Orders o 
ON c.CustomerID = o.CustomerID
JOIN
[Order Details] od 
ON o.OrderID = od.OrderID
GROUP BY c.City

--5.
--a.
SELECT c.City
FROM Customers c
GROUP BY c.City
HAVING COUNT(c.CustomerID) = 2
UNION 
SELECT c2.City
FROM Customers c2
GROUP BY c2.City
HAVING COUNT(c2.CustomerID) > 2

--b.
SELECT dt.City
FROM (
SELECT c.City, COUNT(CustomerID) as cnt
FROM Customers c
GROUP BY c.City) dt
WHERE dt.cnt >= 2

--6.
SELECT c.City
FROM Customers c 
JOIN 
Orders o 
ON c.CustomerID = o.CustomerID
JOIN
[Order Details] od 
ON o.OrderID = od.OrderID
GROUP BY c.City
HAVING COUNT(od.ProductID) >= 2 

--7.
SELECT DISTINCT c.CustomerID, c.CompanyName, c.ContactName
FROM Customers c 
JOIN 
Orders o 
ON c.CustomerID = o.CustomerID
WHERE c.City != o.ShipCity

--8.
SELECT pop.id, SUM(dt.UnitPrice*dt.Quantity)/SUM(dt.Quantity) as AvgPrice, 
dt.ShipCity
FROM (SELECT TOP 5 p.ProductID as id 
FROM [Order Details] od
JOIN
Products p 
ON od.ProductID = p.ProductID
GROUP BY p.ProductID 
ORDER BY SUM(od.Quantity)) pop 
JOIN
(SELECT od.ProductID, od.UnitPrice, o.ShipCity, od.quantity, RANK() OVER(PARTITION BY od.productid ORDER BY(od.quantity) desc) rnk
FROM Orders o
JOIN
[Order Details] od
ON o.OrderID = od.OrderID) dt
ON dt.ProductID = pop.id
WHERE dt.rnk = 1
GROUP BY Pop.id, dt.ShipCity
ORDER BY 1

--9.
--a.
SELECT e.City
FROM Employees e 
WHERE e.City NOT IN
(SELECT o.ShipCity
FROM Orders o
WHERE o.ShipCity IS NOT NULL)
--b.
SELECT e.City
FROM Employees e
LEFT JOIN
Orders o
ON 
e.City = o.ShipCity
WHERE o.ShipCity IS NULL

--10.
SELECT  c1.City
FROM
(SELECT TOP 1 e.city
FROM Employees e 
JOIN 
Orders o
ON e.EmployeeID = o.EmployeeID
GROUP BY e.City
ORDER BY count(o.OrderID) desc) c1
JOIN
(SELECT TOP 1 c.city
FROM Customers c
JOIN 
Orders o
on c.CustomerID = o.CustomerID
JOIN
[Order Details] od 
on o.OrderID = od.OrderID
GROUP BY c.city
ORDER BY sum(od.Quantity) desc) as c2
ON c2.City = c1.City

--11.How do you remove the duplicates record of a table?
--USING RANK() and delete all record with rank greater than 1 

--SAMPLE DB
--Employee (empid integer, mgrid integer, deptid integer, salary money) 
--Dept (deptid integer, deptname varchar(20))
--12.
SELECT e.empid
FROM Employees e
WHERE empid NOT IN
(SELECT DISTINCT e2.mgrid
FROM Employees e2)

--13.
SELECT dt.deptname, dt.num
SELECT d.deptname, COUNT(e.empid) num, RANK OVER(ORDER BY COUNT(e.empid) desc) rnk
FROM Employees e
JOIN 
Dept d 
ON d.depid = e.depid
GROUP BY d.deptname) dt
WHERE rnk = 1 

--14.
SELECT d.deptname, e.empid, e.salary
FROM
Employee e
JOIN
Dept d
ON e.deptid = d.deptid
WHERE 3 >
(SELECT count(e2.salary)
FROM employee e2
WHERE e2.salary > e1.salary
AND e1.deptid = e2.deptid
)


